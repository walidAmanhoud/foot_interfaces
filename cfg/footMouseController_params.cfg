#! /usr/bin/env python


# Initialize ros and import parameter generator
PACKAGE='foot_interfaces'
import roslib
roslib.load_manifest(PACKAGE)

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()


# Add parameters
#       Name     Type    Level Description     	Default 	Min   	Max
gen.add("convergenceRate",double_t,0,"Convergence scale",4.0,1.0,10.0)
gen.add("linearVelocityLimit",double_t,0,"Linear velocity limit [m/s]",0.3,0,0.6)
gen.add("angularVelocityLimit",double_t,0,"Angular velocity limit [rad/s]",1.0,0,3)
gen.add("zVelocity",double_t,0,"Velocity along z axis [m/s]",0.1,0,0.5)
gen.add("modeThreeTranslation",bool_t,0,"Three translation mode",True)

gen.add("arbitrationLimit",double_t,0,"Aribitration Limit (max autonomy value)",0.8,0,1.0)
gen.add("agreementWeight",double_t,0,"Weight on agreement confidence between human and task",15,0,100)
gen.add("attractorWeight",double_t,0,"Weight on task attraction confidence [rad/s]",1.0,0.0,1.0)
gen.add("d1",double_t,0,"d1",0.01,0.0,1.0)
gen.add("d2",double_t,0,"d2",0.0,0.0,1.0)
gen.add("linearSpeedGain",double_t,0,"",4,0.0,10)
gen.add("angularSpeedGain",double_t,0,"",4,0.0,10)
gen.add("filteredGain",double_t,0,"filtering weight of force torque sensor",0.9,0,1)
gen.add("contactForceThreshold",double_t,0,"Force threshold used to detect contact [N]",6,0,10)
gen.add("usePid",bool_t,0,"Activate pid for force tracking",True)
gen.add("targetForce",double_t,0,"Target force to apply [N]",10.0,0.0,20.0)
gen.add("pidLimit",double_t,0,"pid limit",0.3,0,1.0)
gen.add("kp",double_t,0,"kp",0.01,0,0.05)
gen.add("ki",double_t,0,"ki",0.05,0,0.5)
gen.add("kd",double_t,0,"ki",0.0,0,1.0)

# Generate files
exit(gen.generate(PACKAGE, "foot_interfaces", "footMouseController_params"))